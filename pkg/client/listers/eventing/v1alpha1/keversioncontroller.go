/*
Copyright 2019 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing-operator/pkg/apis/eventing/v1alpha1"
)

// KEVersionControllerLister helps list KEVersionControllers.
type KEVersionControllerLister interface {
	// List lists all KEVersionControllers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KEVersionController, err error)
	// KEVersionControllers returns an object that can list and get KEVersionControllers.
	KEVersionControllers(namespace string) KEVersionControllerNamespaceLister
	KEVersionControllerListerExpansion
}

// kEVersionControllerLister implements the KEVersionControllerLister interface.
type kEVersionControllerLister struct {
	indexer cache.Indexer
}

// NewKEVersionControllerLister returns a new KEVersionControllerLister.
func NewKEVersionControllerLister(indexer cache.Indexer) KEVersionControllerLister {
	return &kEVersionControllerLister{indexer: indexer}
}

// List lists all KEVersionControllers in the indexer.
func (s *kEVersionControllerLister) List(selector labels.Selector) (ret []*v1alpha1.KEVersionController, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KEVersionController))
	})
	return ret, err
}

// KEVersionControllers returns an object that can list and get KEVersionControllers.
func (s *kEVersionControllerLister) KEVersionControllers(namespace string) KEVersionControllerNamespaceLister {
	return kEVersionControllerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KEVersionControllerNamespaceLister helps list and get KEVersionControllers.
type KEVersionControllerNamespaceLister interface {
	// List lists all KEVersionControllers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KEVersionController, err error)
	// Get retrieves the KEVersionController from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KEVersionController, error)
	KEVersionControllerNamespaceListerExpansion
}

// kEVersionControllerNamespaceLister implements the KEVersionControllerNamespaceLister
// interface.
type kEVersionControllerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KEVersionControllers in the indexer for a given namespace.
func (s kEVersionControllerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KEVersionController, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KEVersionController))
	})
	return ret, err
}

// Get retrieves the KEVersionController from the indexer for a given namespace and name.
func (s kEVersionControllerNamespaceLister) Get(name string) (*v1alpha1.KEVersionController, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keversioncontroller"), name)
	}
	return obj.(*v1alpha1.KEVersionController), nil
}
